import Foundationimport CoreData // Supondo que seu ViewModel tenha propriedades opcionais para os campos de texto.class RegisterViewModel: ObservableObject {    @Published var nome: String?    @Published var email: String?    @Published var senha: String?        private let persistence = PersistenceController.shared        // 1. A função agora recebe um completion handler para retornar o resultado.    func registrar(completion: @escaping (Bool) -> Void) {        // 2. Desembrulhamos os valores opcionais de forma segura.        // Se algum campo estiver vazio ou nulo, a função para e retorna 'false'.        guard let nome = nome, !nome.isEmpty,              let email = email, !email.isEmpty,              let senha = senha, !senha.isEmpty else {            print("Erro: Todos os campos devem ser preenchidos.")            completion(false)            return        }                // 3. Chamamos a função de persistência e implementamos o seu completion handler.        persistence.registrarUsuario(nome: nome, email: email, senha: senha) { sucesso, usuario in            // Este bloco de código só será executado quando o registro terminar.                        // Garantimos que a resposta seja enviada para a thread principal,            // caso você queira atualizar a interface do usuário.            DispatchQueue.main.async {                if sucesso {                    print("Usuário registrado com sucesso: \(usuario?.nome ?? "")")                    completion(true)                } else {                    print("Falha ao registrar o usuário.")                    completion(false)                }            }        }    }}