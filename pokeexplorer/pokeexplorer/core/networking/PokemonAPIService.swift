import Foundationfinal class PokemonAPIService {    enum APIError: Error { case invalidURL, requestFailed, decodingError }    private let baseURL = "https://pokeapi.co/api/v2/pokemon/"    private let decoder: JSONDecoder = {        let dec = JSONDecoder()        dec.keyDecodingStrategy = .convertFromSnakeCase        return dec    }()    func fetchPokemonList(limit: Int, offset: Int) async throws -> [APIPokemonListItem] {        guard let url = URL(string: "\(baseURL)?limit=\(limit)&offset=\(offset)") else { throw APIError.invalidURL }        let (data, _) = try await URLSession.shared.data(from: url)        let response = try decoder.decode(APIPokemonListResponse.self, from: data)        return response.results    }    func fetchPokemonDetails(name: String) async throws -> APIPokemonDetail {        guard let url = URL(string: "\(baseURL)\(name)") else { throw APIError.invalidURL }        let (data, _) = try await URLSession.shared.data(from: url)        return try decoder.decode(APIPokemonDetail.self, from: data)    }}