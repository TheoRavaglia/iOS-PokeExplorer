import Foundationimport SwiftDataactor PersistenceService {    private var modelContext: ModelContext    init(modelContext: ModelContext) {        self.modelContext = modelContext    }    func createUser(username: String, email: String, passwordHash: String) throws {        let newUser = User(email: email, username: username, passwordHash: passwordHash)        modelContext.insert(newUser)        try modelContext.save()    }    func fetchUser(withEmail email: String) throws -> User? {        var fetchDescriptor = FetchDescriptor<User>(predicate: #Predicate { $0.email == email })        fetchDescriptor.fetchLimit = 1        return try modelContext.fetch(fetchDescriptor).first    }        func addFavorite(pokemonID: Int, name: String, imageURL: String, forUser user: User) throws {        let newFavorite = FavoritePokemon(pokemonID: pokemonID, name: name, imageURL: imageURL)        newFavorite.user = user        user.favoritePokemons.append(newFavorite)        try modelContext.save()    }    func removeFavorite(withID pokemonID: Int, forUser user: User) throws {        guard let favoriteToRemove = user.favoritePokemons.first(where: { $0.pokemonID == pokemonID }) else { return }        modelContext.delete(favoriteToRemove)        try modelContext.save()    }        func isPokemonFavorite(withID pokemonID: Int, forUser user: User) -> Bool {        user.favoritePokemons.contains { $0.pokemonID == pokemonID }    }}