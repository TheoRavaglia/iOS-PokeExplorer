import SwiftUIstruct LoginView: View {    @EnvironmentObject var authManager: AuthManager    @Environment(\.modelContext) private var modelContext    @StateObject private var viewModel = LoginViewModel()    @State private var mostrarRegistro = false    @State private var showSuccess = false        var body: some View {        NavigationView {            VStack(spacing: 20) {                // Header com animação de sucesso                VStack {                    if showSuccess {                        Image(systemName: "checkmark.circle.fill")                            .resizable()                            .scaledToFit()                            .frame(width: 80, height: 80)                            .foregroundColor(.green)                            .transition(.scale.combined(with: .opacity))                    } else {                        Image(systemName: "person.crop.circle.fill")                            .resizable()                            .scaledToFit()                            .frame(width: 80, height: 80)                            .foregroundColor(.blue)                    }                                        Text("Login")                        .font(.largeTitle)                        .bold()                }                .padding(.top, 20)                                // Campos de entrada                VStack(spacing: 15) {                    TextField("Email", text: $viewModel.email)                        .textFieldStyle(.roundedBorder)                        .autocapitalization(.none)                        .keyboardType(.emailAddress)                        .padding(.horizontal)                                        SecureField("Senha", text: $viewModel.senha)                        .textFieldStyle(.roundedBorder)                        .padding(.horizontal)                }                                // Botão de login com animação                Button(action: handleLogin) {                    HStack(spacing: 15) {                        if viewModel.isLoading {                            ProgressView()                                .progressViewStyle(CircularProgressViewStyle(tint: .white))                        }                        Text(viewModel.isLoading ? "Entrando..." : "Entrar")                    }                }                .buttonStyle(AnimatedButtonStyle(isLoading: viewModel.isLoading))                .disabled(viewModel.isLoading)                                // Botão de registro                Button("Criar nova conta") {                    withAnimation(.easeInOut) {                        mostrarRegistro = true                    }                }                .foregroundColor(.blue)                .padding(.top)                                // Mensagem de erro com animação                if viewModel.mostrarErro {                    Text(viewModel.mensagemErro)                        .foregroundColor(.red)                        .padding(.top)                        .transition(.opacity)                }            }            .padding()            .navigationTitle("Bem-vindo")            .navigationBarHidden(true)            .sheet(isPresented: $mostrarRegistro) {                RegisterView()                    .environmentObject(authManager)                    .environment(\.modelContext, modelContext)            }        }    }        private func handleLogin() {        withAnimation {            viewModel.isLoading = true        }                viewModel.login { success, userData in            DispatchQueue.main.async {                if success {                    withAnimation(.spring()) {                        showSuccess = true                    }                                        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {                        if let email = userData?["email"] as? String {                            authManager.login(                                email: email,                                name: userData?["name"] as? String ?? "Usuário"                            )                        }                    }                } else {                    withAnimation {                        viewModel.isLoading = false                    }                }            }        }    }}// Estilo de botão animado (mantido para consistência visual)struct AnimatedButtonStyle: ButtonStyle {    var isLoading: Bool        func makeBody(configuration: Configuration) -> some View {        configuration.label            .padding()            .frame(maxWidth: .infinity)            .background(isLoading ? Color.blue.opacity(0.7) : Color.blue)            .foregroundColor(.white)            .cornerRadius(10)            .padding(.horizontal)            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)            .animation(.easeOut(duration: 0.2), value: configuration.isPressed)    }}