import SwiftUIstruct LoginView: View {    @EnvironmentObject var authManager: AuthManager    @Environment(\.modelContext) private var modelContext    @StateObject private var viewModel = LoginViewModel()    @State private var mostrarRegistro = false    @State private var showSuccess = false        var body: some View {        VStack(spacing: 20) {            // Header            VStack {                if showSuccess {                    Image(systemName: "checkmark.circle.fill")                        .resizable().scaledToFit().frame(width: 80, height: 80)                        .foregroundColor(.green)                        .transition(.scale.combined(with: .opacity))                } else {                    Image(systemName: "person.crop.circle.fill")                        .resizable().scaledToFit().frame(width: 80, height: 80)                        .foregroundColor(.blue)                }                Text("Login").font(.largeTitle).bold()            }            .padding(.top, 20)                        // Campos de texto e botão com o novo estilo            VStack(spacing: 20) {                TextField("Email", text: $viewModel.email)                    .padding(15)                    .background(Color(.systemGray6))                    .cornerRadius(10)                    .autocapitalization(.none)                    .keyboardType(.emailAddress)                                SecureField("Senha", text: $viewModel.senha)                    .padding(15)                    .background(Color(.systemGray6))                    .cornerRadius(10)                Button(action: handleLogin) { // Ação do botão está correta                    HStack(spacing: 15) {                        if viewModel.isLoading {                            ProgressView()                                .progressViewStyle(CircularProgressViewStyle(tint: .white))                        }                        Text(viewModel.isLoading ? "Entrando..." : "Entrar")                    }                }                .buttonStyle(AnimatedButtonStyle(isLoading: viewModel.isLoading))                .disabled(viewModel.isLoading)            }            .padding(.horizontal, 40)            // Botão de registro            Button("Criar nova conta") {                withAnimation(.easeInOut) { mostrarRegistro = true }            }            .foregroundColor(.blue)            .padding(.top)                        // Mensagem de erro            if viewModel.mostrarErro {                Text(viewModel.mensagemErro)                    .foregroundColor(.red).padding(.top).transition(.opacity)            }        }        .padding()        .sheet(isPresented: $mostrarRegistro) {            RegisterView()                .environmentObject(authManager)                .environment(\.modelContext, modelContext)        }        .onTapGesture {            UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)        }    }        // FUNÇÃO RESTAURADA: Sua lógica de login original está de volta.    private func handleLogin() {        withAnimation {            viewModel.isLoading = true        }                viewModel.login { success, userData in            DispatchQueue.main.async {                if success {                    withAnimation(.spring()) {                        showSuccess = true                    }                                        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {                        if let email = userData?["email"] as? String {                            authManager.login(                                email: email,                                name: userData?["name"] as? String ?? "Usuário"                            )                        }                    }                } else {                    withAnimation {                        viewModel.isLoading = false                    }                }            }        }    }}// Estilo do botão modificado (como solicitado)struct AnimatedButtonStyle: ButtonStyle {    var isLoading: Bool        func makeBody(configuration: Configuration) -> some View {        configuration.label            .padding(.vertical, 16)            .frame(maxWidth: .infinity)            .background(isLoading ? Color.blue.opacity(0.7) : Color.blue)            .foregroundColor(.white)            .cornerRadius(10)            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)            .animation(.easeOut(duration: 0.2), value: configuration.isPressed)    }}