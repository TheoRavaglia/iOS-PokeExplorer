import SwiftUIstruct PokemonDetailView: View {    let pokemon: Pokemon    @StateObject private var viewModel = PokemonDetailViewModel()    @Environment(\.presentationMode) var presentationMode        var body: some View {        ScrollView {            VStack(spacing: 20) {                // Header com imagem                ZStack {                    Color(.systemGroupedBackground)                        .edgesIgnoringSafeArea(.top)                        .frame(height: 300)                                        if let detail = viewModel.pokemonDetails {                        AsyncImage(url: detail.officialArtwork) { phase in                            if let image = phase.image {                                image                                    .resizable()                                    .scaledToFit()                                    .frame(height: 250)                                    .shadow(radius: 10)                            } else if phase.error != nil {                                Image(systemName: "questionmark.circle")                                    .font(.system(size: 100))                            } else {                                ProgressView()                            }                        }                    } else {                        ProgressView()                    }                }                                // Informações básicas                VStack(spacing: 16) {                    Text(pokemon.name.capitalized)                        .font(.largeTitle)                        .bold()                                        if let id = pokemon.pokemonId {                        Text("#\(String(format: "%03d", id))")                            .font(.title2)                            .foregroundColor(.gray)                    }                                        // Tipos                    if let types = viewModel.pokemonDetails?.types {                        HStack(spacing: 12) {                            ForEach(types, id: \.self) { type in                                Text(type.capitalized)                                    .padding(.horizontal, 16)                                    .padding(.vertical, 8)                                    .background(Color(type.lowercased()))                                    .foregroundColor(.white)                                    .cornerRadius(20)                            }                        }                    }                }                .padding(.horizontal)                                // Stats                if let stats = viewModel.pokemonDetails?.stats {                    VStack(alignment: .leading, spacing: 12) {                        Text("Estatísticas")                            .font(.title2)                            .bold()                            .padding(.bottom, 8)                                                ForEach(stats, id: \.name) { stat in                            StatBarView(statName: stat.name, value: stat.value)                        }                    }                    .padding()                    .background(Color(.secondarySystemBackground))                    .cornerRadius(12)                    .padding(.horizontal)                }                                Spacer()            }        }        .edgesIgnoringSafeArea(.top)        .navigationBarTitleDisplayMode(.inline)        .onAppear {            viewModel.loadDetails(for: pokemon)        }        .toolbar {            ToolbarItem(placement: .navigationBarLeading) {                Button {                    presentationMode.wrappedValue.dismiss()                } label: {                    Image(systemName: "chevron.left")                        .foregroundColor(.primary)                }            }        }    }}// View para barras de estatísticastruct StatBarView: View {    let statName: String    let value: Int        var body: some View {        VStack(alignment: .leading, spacing: 4) {            HStack {                Text(statName.capitalized)                    .frame(width: 100, alignment: .leading)                                Text("\(value)")                    .frame(width: 40)                                GeometryReader { geometry in                    Rectangle()                        .frame(width: CGFloat(value) / 200 * geometry.size.width, height: 8)                        .foregroundColor(colorForStat(value: value))                        .cornerRadius(4)                }                .frame(height: 8)            }        }    }        private func colorForStat(value: Int) -> Color {        switch value {        case 0..<30: return .red        case 30..<60: return .orange        case 60..<90: return .yellow        case 90..<120: return .green        default: return .blue        }    }}