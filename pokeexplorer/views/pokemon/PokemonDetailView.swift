import SwiftUIimport SwiftData// A struct 'BounceOnClickStyle' foi REMOVIDA daqui, pois já existe no seu projeto.struct PokemonDetailView: View {    @Environment(\.modelContext) private var modelContext    @EnvironmentObject var authManager: AuthManager        @StateObject var viewModel: PokemonDetailViewModel        var namespace: Namespace.ID        init(pokemon: Pokemon, modelContext: ModelContext, authManager: AuthManager, namespace: Namespace.ID) {        _viewModel = StateObject(wrappedValue: PokemonDetailViewModel(pokemon: pokemon, modelContext: modelContext, authManager: authManager))        self.namespace = namespace    }        var body: some View {        ScrollView {            VStack(spacing: 20) {                // Header Section                if let url = viewModel.pokemonImageURL {                    AsyncImage(url: url) { phase in                        switch phase {                        case .success(let image):                            image                                .resizable()                                .scaledToFit()                                .frame(width: 200, height: 200)                                .matchedGeometryEffect(id: "sprite\(viewModel.pokemon.id)", in: namespace)                                .shadow(radius: 5)                        case .failure:                            Image(systemName: "questionmark.circle")                                .font(.largeTitle)                        default:                            ProgressView()                        }                    }                }                                Text(viewModel.pokemonName)                    .font(.largeTitle)                                if let id = viewModel.pokemon.pokemonId {                    Text("#\(String(format: "%03d", id))")                        .font(.title2)                        .foregroundColor(.gray)                }                                // Botão de Favoritar com Animação                Button {                    Task {                        await viewModel.toggleFavorite()                    }                } label: {                    Image(systemName: viewModel.isFavorite ? "heart.fill" : "heart")                        .font(.largeTitle)                        .foregroundColor(viewModel.isFavorite ? .red : .gray)                        .scaleEffect(viewModel.animateHeart ? 1.2 : 1.0)                        .animation(.spring(response: 0.3, dampingFraction: 0.6), value: viewModel.animateHeart)                }                // MODIFICAÇÃO CORRETA: Apenas aplique o estilo.                .buttonStyle(BounceOnClickStyle())                .padding(.bottom, 10)                // Types Section                VStack(alignment: .leading) {                    Text("Types")                        .font(.headline)                    Text(viewModel.formattedTypes)                }                .frame(maxWidth: .infinity, alignment: .leading)                .padding()                .background(Color(.systemGray6))                .cornerRadius(10)                                // Stats Section                VStack(alignment: .leading) {                    Text("Stats")                        .font(.headline)                                        ForEach(viewModel.formattedStats) { stat in                        HStack {                            Text(stat.name.capitalized)                                .frame(width: 100, alignment: .leading)                                                        ProgressView(value: Double(stat.value), total: 255)                                                        Text("\(stat.value)")                                .frame(width: 40)                        }                    }                }                .padding()                .background(Color(.systemGray6))                .cornerRadius(10)                                // Physical Attributes                if let details = viewModel.pokemonDetails {                    HStack {                        VStack {                            Text("Height")                                .font(.headline)                            Text("\(Double(details.height) / 10.0, specifier: "%.1f") m")                        }                        .frame(maxWidth: .infinity)                                                VStack {                            Text("Weight")                                .font(.headline)                            Text("\(Double(details.weight) / 10.0, specifier: "%.1f") kg")                        }                        .frame(maxWidth: .infinity)                    }                    .padding()                    .background(Color(.systemGray6))                    .cornerRadius(10)                }            }            .padding()        }        .navigationTitle(viewModel.pokemonName)        .navigationBarTitleDisplayMode(.inline)        .overlay {            if viewModel.isLoading {                ProgressView()            }        }        .alert("Error", isPresented: .constant(viewModel.error != nil)) {            Button("OK", role: .cancel) { viewModel.error = nil }        } message: {            Text(viewModel.error ?? "Unknown error")        }    }}