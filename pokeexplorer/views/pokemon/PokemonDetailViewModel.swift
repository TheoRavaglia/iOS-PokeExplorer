import Foundationimport Combineclass PokemonDetailViewModel: ObservableObject {    @Published var pokemonDetails: PokemonDetails?    @Published var isLoading = false    @Published var error: Error?        private let service = PokemonService()    private var cancellables = Set<AnyCancellable>()        func loadDetails(for pokemon: Pokemon) {        guard let id = pokemon.pokemonId else { return }                isLoading = true        error = nil                service.fetchPokemonDetails(id: id)            .receive(on: DispatchQueue.main)            .sink(receiveCompletion: { [weak self] completion in                self?.isLoading = false                if case .failure(let error) = completion {                    self?.error = error                }            }, receiveValue: { [weak self] details in                self?.pokemonDetails = details            })            .store(in: &cancellables)    }}