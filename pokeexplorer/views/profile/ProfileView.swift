import SwiftUIimport SwiftDatastruct ProfileView: View {    @EnvironmentObject var authManager: AuthManager    @Environment(\.modelContext) private var modelContext    @Query private var favorites: [FavoritePokemon]    // MODIFICAÇÃO 1: Adicionamos um namespace local para esta tela.    @Namespace private var profileNamespace    private var userFavorites: [FavoritePokemon] {        guard let userEmail = authManager.currentUser?.email else { return [] }        return favorites.filter { $0.userId == userEmail }            .sorted { $0.dateAdded > $1.dateAdded }    }        var body: some View {        List {            Section("Informações") {                if let user = authManager.currentUser {                    Text("Nome: \(user.name)")                    Text("Email: \(user.email)")                } else {                    Text("Nenhum usuário logado.")                }            }                        Section("Pokémons Favoritos") {                if userFavorites.isEmpty {                    Text("Nenhum Pokémon favoritado ainda.")                        .foregroundColor(.gray)                } else {                    ForEach(userFavorites) { favorite in                        NavigationLink {                            // MODIFICAÇÃO 2: Passamos o namespace local para o DetailView.                            PokemonDetailView(                                pokemon: Pokemon(name: favorite.pokemonName, url: "https://pokeapi.co/api/v2/pokemon/\(favorite.pokemonId)/"),                                modelContext: modelContext,                                authManager: authManager,                                namespace: profileNamespace // <-- PARÂMETRO ADICIONADO AQUI                            )                        } label: {                            HStack {                                Text(favorite.pokemonName.capitalized)                                Spacer()                                Button {                                    deleteFavorite(favorite)                                } label: {                                    Image(systemName: "heart.fill")                                        .foregroundColor(.red)                                }                                .buttonStyle(PlainButtonStyle())                            }                        }                    }                    .onDelete(perform: deleteFavoriteByIndexSet)                }            }        }        .navigationTitle("Perfil")    }        // MARK: - Funções de exclusão        private func deleteFavoriteByIndexSet(at offsets: IndexSet) {        for index in offsets {            let favorite = userFavorites[index]            modelContext.delete(favorite)        }    }    private func deleteFavorite(_ favorite: FavoritePokemon) {        modelContext.delete(favorite)    }}